name: Build and Deploy Documentation

on:
  push:
    branches: 
      - main
    tags:
      - 'v*'
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: 
      - main
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - '.github/workflows/docs.yml'
  # Allow manual trigger
  workflow_dispatch:
  # Trigger when a release is published
  release:
    types: [published]

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Documentation quality checks
  docs-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install documentation quality tools
        run: |
          # Install lychee (link checker)
          curl -fsSL https://github.com/lycheeverse/lychee/releases/download/v0.13.0/lychee-v0.13.0-x86_64-unknown-linux-gnu.tar.gz | tar -xzC /tmp
          sudo mv /tmp/lychee /usr/local/bin/
          
          # Install markdownlint-cli
          npm install -g markdownlint-cli
          
          # Install codespell
          pip install codespell

      - name: Run link checker
        run: |
          # Create lychee config if it doesn't exist
          if [ ! -f ".lycheeignore" ]; then
            cat > .lycheeignore << 'EOF'
          # Ignore local/placeholder links
          http://localhost*
          https://localhost*
          http://127.0.0.1*
          https://127.0.0.1*
          # Common false positives
          mailto:*
          # GitHub internal links that may not be accessible during CI
          *github.com/*/settings/*
          *github.com/*/actions/*
          EOF
          fi
          
          # Run lychee on all markdown files
          lychee --config .lycheeignore --verbose --no-progress --max-concurrency 4 \.
          
      - name: Run markdown linter
        run: |
          # Create markdownlint config if it doesn't exist
          if [ ! -f ".markdownlint.yml" ]; then
            cat > .markdownlint.yml << 'EOF'
          # Markdownlint configuration
          default: true
          MD013: false  # Line length - often impractical for documentation
          MD033: false  # HTML tags - sometimes necessary in docs
          MD041: false  # First line in file should be a top level heading
          MD029: false  # Ordered list item prefix - allow both 1. and 1)
          MD036: false  # Emphasis used instead of a heading
          EOF
          fi
          
          # Run markdownlint on all markdown files
          markdownlint "**/*.md" --config .markdownlint.yml
          
      - name: Run spell checker
        run: |
          # Create codespell config if it doesn't exist
          if [ ! -f ".codespellrc" ]; then
            cat > .codespellrc << 'EOF'
          [codespell]
          skip = .git,*.png,*.jpg,*.jpeg,*.svg,*.ico,*.woff,*.woff2,*.eot,*.ttf,*.otf,*.pdf,*.zip,*.tar.gz,*.tar.bz2,*.7z,*.rar,node_modules,dist,build,*.lock,*.log,*.min.js,*.min.css
          ignore-words-list = ans,ba,convertor,datas,fo,hist,nd,te,wan
          check-filenames = true
          check-hidden = true
          EOF
          fi
          
          # Run codespell on all files
          codespell --config .codespellrc

  # Build job
  build:
    runs-on: ubuntu-latest
    needs: docs-quality
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          key: ${{ github.ref }}
          path: .cache

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install mkdocs-material
          pip install mkdocs-git-revision-date-localized-plugin
          pip install mkdocs-minify-plugin
          pip install mkdocs-mermaid2-plugin
          
      - name: Install PlantUML
        run: |
          sudo apt-get update
          sudo apt-get install -y plantuml
          plantuml -version
          
      - name: Generate Architecture Diagrams
        run: |
          cd docs/architecture
          make generate-diagrams
          
      - name: Validate PlantUML syntax
        run: |
          cd docs/architecture
          make validate-diagrams

      - name: Build documentation
        run: mkdocs build --clean --strict

      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: ./site

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  # Versioned documentation for releases
  deploy-versioned:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install mike for versioned docs
        run: |
          pip install mkdocs-material mike
          pip install mkdocs-git-revision-date-localized-plugin
          pip install mkdocs-minify-plugin
          pip install mkdocs-mermaid2-plugin

      - name: Configure git
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

      - name: Deploy versioned documentation
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          mike deploy --push --update-aliases $VERSION latest
          mike set-default --push latest
